//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/A2/TextAdenture.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TextAdenture : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TextAdenture()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TextAdenture"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""bca5ed29-ddd2-40f1-88bd-4e50be8e17c4"",
            ""actions"": [
                {
                    ""name"": ""press1"",
                    ""type"": ""Button"",
                    ""id"": ""79a84764-ffa7-4fae-89c5-791874fbdaf9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""press2"",
                    ""type"": ""Button"",
                    ""id"": ""876d0a0f-ad30-4158-a973-b12c75017440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""press3"",
                    ""type"": ""Button"",
                    ""id"": ""df06dbed-000e-4d1b-96af-3e9d12cba3d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""press4"",
                    ""type"": ""Button"",
                    ""id"": ""5a0cd566-8b28-4a75-ab2e-a9115d1339e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""anyKey"",
                    ""type"": ""Button"",
                    ""id"": ""6629eef3-ef80-47d1-a435-1346443b948d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd2a7e0a-ff54-4e29-aaa3-196d56970e5d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec6077f0-ff0c-47d6-ac1f-7c4c7ab42b4d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c18f64a9-8088-4f31-81ca-fe855ba4efb2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0cdacf7-b9ed-4648-8741-d10a5c412c74"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2e3db12-dd65-4022-b7ed-f6eecfa6c90a"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""anyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_press1 = m_PlayerActionMap.FindAction("press1", throwIfNotFound: true);
        m_PlayerActionMap_press2 = m_PlayerActionMap.FindAction("press2", throwIfNotFound: true);
        m_PlayerActionMap_press3 = m_PlayerActionMap.FindAction("press3", throwIfNotFound: true);
        m_PlayerActionMap_press4 = m_PlayerActionMap.FindAction("press4", throwIfNotFound: true);
        m_PlayerActionMap_anyKey = m_PlayerActionMap.FindAction("anyKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private IPlayerActionMapActions m_PlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerActionMap_press1;
    private readonly InputAction m_PlayerActionMap_press2;
    private readonly InputAction m_PlayerActionMap_press3;
    private readonly InputAction m_PlayerActionMap_press4;
    private readonly InputAction m_PlayerActionMap_anyKey;
    public struct PlayerActionMapActions
    {
        private @TextAdenture m_Wrapper;
        public PlayerActionMapActions(@TextAdenture wrapper) { m_Wrapper = wrapper; }
        public InputAction @press1 => m_Wrapper.m_PlayerActionMap_press1;
        public InputAction @press2 => m_Wrapper.m_PlayerActionMap_press2;
        public InputAction @press3 => m_Wrapper.m_PlayerActionMap_press3;
        public InputAction @press4 => m_Wrapper.m_PlayerActionMap_press4;
        public InputAction @anyKey => m_Wrapper.m_PlayerActionMap_anyKey;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterface != null)
            {
                @press1.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress1;
                @press1.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress1;
                @press1.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress1;
                @press2.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress2;
                @press2.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress2;
                @press2.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress2;
                @press3.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress3;
                @press3.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress3;
                @press3.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress3;
                @press4.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress4;
                @press4.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress4;
                @press4.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPress4;
                @anyKey.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAnyKey;
                @anyKey.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAnyKey;
                @anyKey.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAnyKey;
            }
            m_Wrapper.m_PlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @press1.started += instance.OnPress1;
                @press1.performed += instance.OnPress1;
                @press1.canceled += instance.OnPress1;
                @press2.started += instance.OnPress2;
                @press2.performed += instance.OnPress2;
                @press2.canceled += instance.OnPress2;
                @press3.started += instance.OnPress3;
                @press3.performed += instance.OnPress3;
                @press3.canceled += instance.OnPress3;
                @press4.started += instance.OnPress4;
                @press4.performed += instance.OnPress4;
                @press4.canceled += instance.OnPress4;
                @anyKey.started += instance.OnAnyKey;
                @anyKey.performed += instance.OnAnyKey;
                @anyKey.canceled += instance.OnAnyKey;
            }
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);
    public interface IPlayerActionMapActions
    {
        void OnPress1(InputAction.CallbackContext context);
        void OnPress2(InputAction.CallbackContext context);
        void OnPress3(InputAction.CallbackContext context);
        void OnPress4(InputAction.CallbackContext context);
        void OnAnyKey(InputAction.CallbackContext context);
    }
}
